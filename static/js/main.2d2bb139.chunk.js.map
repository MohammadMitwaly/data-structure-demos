{"version":3,"sources":["util/genRandomNumber.ts","models/Node.ts","models/LinkedList.ts","models/DoublyLinkedList.ts","util/fillLinkedList.ts","sketches/LinkedListSketch.tsx","models/BinNode.ts","models/BST.ts","sketches/BinarySearchTreeSketch.tsx","models/Stack.ts","sketches/StackSketch.tsx","models/CircularQueue.ts","sketches/CircularQueueSketch.tsx","sketches/DoublyLinkedListSketch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["genRandomNumber","min","max","Math","ceil","floor","random","Node","value","next","previous","this","LinkedList","head","lengthOfList","node","last","curr","console","log","foundValue","prev","position","currIndex","p5","xCord","yCord","newRow","drawStart","drawValueText","drawNodeShape","width","currX","nextY","height","drawConnection","fill","noStroke","textAlign","RIGHT","text","xOffset","yOffset","rectMode","CENTER","stroke","noFill","rect","xCordOfNext","yCordOfNext","line","DoublyLinkedList","undefined","createFillList","amount","minNumber","maxNumber","list","headNode","insert","i","LinkedListSketch","props","linkedListOfNumbers","createFillLinkedListNumbers","setup","canvasParentRef","createCanvas","windowWidth","windowHeight","parent","draw","background","drawList","noLoop","windowResized","resizeCanvas","BinNode","left","right","xCo","yCo","rightSpacing","leftSpacing","cumulativeRightSpacing","cumulativeLeftSpacing","addNodeBST","HORIZONTALSPACING","arr","traverseInOrder","push","x","y","VERTICALSPACING","BST","root","valuesInOrder","rootX","rootY","ellipse","printParent","SketchBST","window","innerWidth","rootBST","addNode","Stack","maxSize","innerHeight","values","length","pop","stackHeight","drawShape","drawStackItems","stackWidth","forEach","fillNumberStack","minLimit","maxLimit","stack","StackSketch","useState","myStack","setMyStack","drawStack","CircularQueue","frontIndex","rearIndex","isFull","valueToBeDequeue","isEmpty","resetQueue","index","queueWidth","drawQueueItems","drawFront","drawRear","queueItemHeight","queueHeight","fillNumberQueue","queue","enQueue","CircularQueueSketch","myQueue","setMyQueue","drawQueue","DoublyLinkedListSketch","createFillDoublyLinkedListNumbers","outputList","App","currentSketch","setCurrentSketch","updateCurrentSketch","className","onClick","n","handleSwitch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d2bb139.chunk.js","sourcesContent":["export const genRandomNumber = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n","export default class Node<T> {\r\n    value: T;\r\n    next: Node<T> | undefined;\r\n    previous?: Node<T> | undefined;\r\n\r\n    constructor(value: T, next?: Node<T>, previous?: Node<T>) {\r\n        this.value = value;\r\n        this.next = next;\r\n        this.previous = previous;\r\n    }\r\n}\r\n","import Node from \"./Node\";\r\nimport p5Types from \"p5\";\r\n\r\nexport class LinkedList {\r\n  head: Node<number | string> | undefined;\r\n  // Adding length to optimize \"search\" by index\r\n  // The logic breaks if we are trying to add a chain of nodes\r\n  // TODO: Fix logic\r\n  lengthOfList: number = 0;\r\n\r\n  insert(node: Node<number | string>) {\r\n    if (!this.head) {\r\n      this.head = node;\r\n    } else {\r\n      let last = this.head;\r\n      while (last.next) {\r\n        last = last.next;\r\n      }\r\n      last.next = node;\r\n    }\r\n    this.lengthOfList++;\r\n  }\r\n\r\n  outputList() {\r\n    let curr = this.head;\r\n    console.log(`Start --> ${curr?.value}`);\r\n    while (curr?.next) {\r\n      console.log(` --> ${curr.next.value}`);\r\n      curr = curr.next;\r\n    }\r\n  }\r\n\r\n  findValue(value: number | string): boolean {\r\n    let foundValue = false;\r\n    let curr = this.head;\r\n    foundValue = curr?.value === value;\r\n    while (curr?.next) {\r\n      foundValue = curr?.next.value === value;\r\n      if (foundValue) {\r\n        return foundValue;\r\n      }\r\n      curr = curr.next;\r\n    }\r\n    return foundValue;\r\n  }\r\n\r\n  removeNodeByValue(value: number | string) {\r\n    // Store head and set-up previous\r\n    let curr = this.head;\r\n    let prev: Node<number | string> | undefined;\r\n    // Value is the head, reset head of list\r\n    if (curr?.value === value) {\r\n      this.head = curr.next;\r\n      console.log(\"Found it, value was head-node\");\r\n      return;\r\n    }\r\n\r\n    // Look for value in the rest of the list\r\n    while (curr && curr.value !== value) {\r\n      prev = curr;\r\n      curr = curr.next;\r\n    }\r\n\r\n    // We found it before reaching the end of the list\r\n    // Shift the list to remove it\r\n    if (curr) {\r\n      if (prev) {\r\n        prev.next = curr.next;\r\n        console.log(\"Found it, value was somewhere in the middle\");\r\n        return;\r\n      }\r\n    }\r\n    console.log(\"Node does not exist\");\r\n  }\r\n\r\n  removeNodeByPosition(position: number) {\r\n    if (position > this.lengthOfList) {\r\n      console.log(\"Node position does not exist\");\r\n      return;\r\n    }\r\n\r\n    let curr = this.head;\r\n    let prev: Node<number | string> | undefined;\r\n\r\n    if (position === 0 && curr) {\r\n      this.head = curr.next;\r\n      console.log(\"Node was head\");\r\n      return;\r\n    }\r\n\r\n    let currIndex = 0;\r\n    while (curr) {\r\n      if (currIndex === position) {\r\n        if (prev) {\r\n          prev.next = curr.next;\r\n          console.log(\"Found it, value was somewhere in the middle\");\r\n          return;\r\n        }\r\n      }\r\n      currIndex++;\r\n      prev = curr;\r\n      curr = curr.next;\r\n    }\r\n  }\r\n\r\n  /* Drawing logic */\r\n  drawList(p5: p5Types) {\r\n    let xCord = 75;\r\n    let yCord = 75;\r\n    let xOffset = 16;\r\n    let yOffset = 5;\r\n    let newRow = false;\r\n    let curr = this.head;\r\n    this.drawStart(50, 40, p5);\r\n    while (curr) {\r\n      this.drawValueText(xCord, yCord, xOffset, yOffset, curr?.value, p5);\r\n      this.drawNodeShape(xCord, yCord, p5);\r\n\r\n      curr = curr.next;\r\n      console.log(xCord, yCord, p5.width);\r\n      if (!newRow) {\r\n        let currX = xCord;\r\n        xCord = xCord + p5.width / 9 + 30;\r\n        let nextY =\r\n          xCord > p5.width - 200 || xCord < 50\r\n            ? yCord + p5.height / 14 + 45\r\n            : yCord;\r\n        // Curr has been reassigned to next, we don't want to draw a connection unless next exists\r\n        if (curr) {\r\n          this.drawConnection(\r\n            currX,\r\n            yCord,\r\n            xCord < 50 ? 75 : xCord,\r\n            nextY + 8,\r\n            p5\r\n          );\r\n        }\r\n      } else {\r\n        let currX = xCord;\r\n        xCord = xCord - p5.width / 9 - 30;\r\n        let nextY =\r\n          xCord > p5.width - 200 || xCord < 50\r\n            ? yCord + p5.height / 14 + 45\r\n            : yCord;\r\n        // Curr has been reassigned to next, we don't want to draw a connection unless next exists\r\n        if (curr) {\r\n          this.drawConnection(currX, yCord, xCord < 50 ? 75 : xCord, nextY, p5);\r\n        }\r\n      }\r\n\r\n      if (xCord > p5.width - 200) {\r\n        newRow = true;\r\n        yCord = yCord + p5.height / 14 + 45;\r\n      } else if (xCord < 50) {\r\n        newRow = false;\r\n        xCord = 75;\r\n        yCord = yCord = yCord + p5.height / 14 + 45;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawStart(xCord: number, yCord: number, p5: p5Types) {\r\n    p5.fill(255);\r\n    p5.noStroke();\r\n    p5.textAlign(p5.RIGHT);\r\n    p5.text(`Start ⤵️`, xCord, yCord);\r\n  }\r\n\r\n  drawValueText(\r\n    xCord: number,\r\n    yCord: number,\r\n    xOffset: number,\r\n    yOffset: number,\r\n    value: number | string | undefined,\r\n    p5: p5Types\r\n  ) {\r\n    p5.fill(255);\r\n    p5.noStroke();\r\n    p5.textAlign(p5.RIGHT);\r\n    p5.text(`Value➡️${value || \"null\"}`, xCord + xOffset, yCord - yOffset);\r\n  }\r\n\r\n  drawNodeShape(xCord: number, yCord: number, p5: p5Types) {\r\n    p5.rectMode(p5.CENTER);\r\n    p5.stroke(255);\r\n    p5.noFill();\r\n    p5.rect(xCord, yCord, p5.width / 9, p5.height / 14);\r\n  }\r\n\r\n  drawConnection(\r\n    xCord: number,\r\n    yCord: number,\r\n    xCordOfNext: number,\r\n    yCordOfNext: number,\r\n    p5: p5Types\r\n  ) {\r\n    p5.rectMode(p5.CENTER);\r\n    p5.stroke(\"#047de0\");\r\n    p5.fill(255);\r\n    p5.rect(xCord + 45, yCord + 10, 5, 5);\r\n    p5.line(xCord + 45, yCord + 10, xCordOfNext, yCordOfNext);\r\n  }\r\n}\r\n","import { LinkedList } from './LinkedList';\r\nimport Node from './Node';\r\n\r\nexport default class DoublyLinkedList extends LinkedList {\r\n    head: Node<number | string> | undefined;\r\n    // Adding length to optimize \"search\" by index\r\n    // The logic breaks if we are trying to add a chain of nodes\r\n    // TODO: Fix logic\r\n    lengthOfList: number = 0;\r\n\r\n    insert(node: Node<number | string>) {\r\n        if (!this.head) {\r\n            this.head = node;\r\n        } else {\r\n            let last = this.head;\r\n            while (last.next) {\r\n                last = last.next;\r\n            }\r\n            node.previous = last;\r\n            last.next = node;\r\n        }\r\n        this.lengthOfList++;\r\n    }\r\n\r\n    outputList() {\r\n        let curr = this.head;\r\n        console.log(`Start --> ${curr?.value}`);\r\n        while (curr?.next) {\r\n            console.log(`${curr.previous} <-- Previous`);\r\n            console.log(` Next --> ${curr.next.value}`);\r\n            curr = curr.next;\r\n        }\r\n    }\r\n\r\n    removeNodeByValue(value: number | string) {\r\n        // Store head and set-up previous\r\n        let curr = this.head;\r\n        // Value is the head, reset head of list\r\n        if (curr?.value === value) {\r\n            this.head = curr.next;\r\n            console.log('Found it, value was head-node');\r\n            return;\r\n        }\r\n\r\n        // Look for value in the rest of the list\r\n        while (curr && curr.value !== value) {\r\n            curr = curr.next;\r\n        }\r\n\r\n        // We found it before reaching the end of the list\r\n        // Shift the list to remove it\r\n        if (curr) {\r\n            if (curr.previous) {\r\n                curr.previous.next = curr.next;\r\n                console.log('Found it, value was somewhere in the middle');\r\n                return;\r\n            }\r\n        }\r\n        console.log('Node does not exist');\r\n    }\r\n\r\n    removeNodeByPosition(position: number) {\r\n        if (position > this.lengthOfList || position < 0) {\r\n            console.log('Node position does not exist');\r\n            return;\r\n        }\r\n\r\n        let curr = this.head;\r\n\r\n        if (position === 0 && curr) {\r\n            if (curr.next?.previous) {\r\n                curr.next.previous = undefined;\r\n                this.head = curr.next;\r\n                console.log('Node was head');\r\n                return;\r\n            }\r\n        }\r\n\r\n        let currIndex = 0;\r\n        while (curr) {\r\n            if (currIndex === position) {\r\n                if (curr.previous) {\r\n                    curr.previous.next = curr.next;\r\n                    console.log('Found it, value was somewhere in the middle');\r\n                    return;\r\n                }\r\n            }\r\n            currIndex++;\r\n            curr = curr.next;\r\n        }\r\n    }\r\n}\r\n","import { genRandomNumber } from './genRandomNumber';\r\nimport Node from '../models/Node';\r\nimport { LinkedList } from '../models/LinkedList';\r\nimport DoublyLinkedList from '../models/DoublyLinkedList';\r\n\r\nexport const createFillLinkedListNumbers = (\r\n    amount: number,\r\n    minNumber: number,\r\n    maxNumber: number\r\n) => {\r\n    let list = new LinkedList();\r\n    list = createFillList(amount, minNumber, maxNumber, list);\r\n    return list;\r\n};\r\n\r\nexport const createFillDoublyLinkedListNumbers = (\r\n    amount: number,\r\n    minNumber: number,\r\n    maxNumber: number\r\n) => {\r\n    let list = new DoublyLinkedList();\r\n    list = createFillList(amount, minNumber, maxNumber, list);\r\n    return list;\r\n};\r\n\r\nconst createFillList = (\r\n    amount: number,\r\n    minNumber: number,\r\n    maxNumber: number,\r\n    list: LinkedList | DoublyLinkedList\r\n) => {\r\n    const headNode = new Node(genRandomNumber(minNumber, maxNumber));\r\n    list.insert(headNode);\r\n    for (let i = 0; i < amount; i++) {\r\n        list.insert(new Node(genRandomNumber(minNumber, maxNumber)));\r\n    }\r\n    return list;\r\n};\r\n","import React from \"react\";\r\nimport p5Types from \"p5\";\r\nimport Sketch from \"react-p5\";\r\nimport { createFillLinkedListNumbers } from \"../util/fillLinkedList\";\r\n\r\ninterface LinkedListSketchProps {}\r\n\r\nexport const LinkedListSketch: React.FC<LinkedListSketchProps> = (\r\n  props: LinkedListSketchProps\r\n) => {\r\n  const linkedListOfNumbers = createFillLinkedListNumbers(18, 42, 720);\r\n\r\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n    p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\r\n    console.log(linkedListOfNumbers);\r\n  };\r\n\r\n  const draw = (p5: p5Types) => {\r\n    p5.background(\"#172121\");\r\n    linkedListOfNumbers.drawList(p5);\r\n    p5.noLoop();\r\n  };\r\n\r\n  const resize = (p5: p5Types) => {\r\n    p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} windowResized={resize} />;\r\n};\r\n","export class BinNode {\r\n  left?: BinNode;\r\n  right?: BinNode;\r\n  parent?: BinNode;\r\n  value: string | number;\r\n  xCo: number;\r\n  yCo: number;\r\n  rightSpacing: number;\r\n  leftSpacing: number;\r\n  cumulativeRightSpacing: number;\r\n  cumulativeLeftSpacing: number;\r\n  // Constants controlling the positions of the nodes relative to one another\r\n  static HORIZONTALSPACING = 20; // Horizontal distance between two nodes\r\n  static VERTICALSPACING = 50; // Vertical distance between tow nodes\r\n\r\n  constructor(value: string | number, left?: BinNode, right?: BinNode) {\r\n    this.left = left;\r\n    this.right = right;\r\n    this.value = value;\r\n    this.xCo = 0;\r\n    this.yCo = 0;\r\n    // The horizontal space between this node and its left/right children\r\n    this.rightSpacing = 0;\r\n    this.leftSpacing = 0;\r\n    this.cumulativeRightSpacing = 0;\r\n    this.cumulativeLeftSpacing = 0;\r\n  }\r\n\r\n  addNodeBST(node: BinNode) {\r\n    if (node.value < this.value) {\r\n      if (!this.left) {\r\n        node.parent = this;\r\n        this.left = node;\r\n        this.left.xCo = this.xCo - 50;\r\n        this.left.yCo = this.yCo + 20;\r\n        node.leftSpacing =\r\n          this.cumulativeRightSpacing + BinNode.HORIZONTALSPACING;\r\n        node.cumulativeLeftSpacing =\r\n          node.leftSpacing + this.cumulativeLeftSpacing;\r\n      } else {\r\n        this.left.addNodeBST(node);\r\n      }\r\n    } else if (node.value > this.value) {\r\n      if (!this.right) {\r\n        node.parent = this;\r\n        this.right = node;\r\n        this.right.xCo = this.xCo + 50;\r\n        this.right.yCo = this.yCo + 20;\r\n        node.rightSpacing =\r\n          this.cumulativeLeftSpacing + BinNode.HORIZONTALSPACING;\r\n        node.cumulativeRightSpacing =\r\n          this.cumulativeRightSpacing + node.rightSpacing;\r\n      } else {\r\n        this.right.addNodeBST(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  traverseInOrder(node: BinNode | undefined, arr: number[] | string[]) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n    this.traverseInOrder(node.left, arr);\r\n    //@ts-ignore\r\n    arr.push(node.value);\r\n    this.traverseInOrder(node.right, arr);\r\n  }\r\n\r\n  setCoordinates(x: number, y: number) {\r\n    this.xCo = x;\r\n    this.yCo = y;\r\n  }\r\n}\r\n","import { BinNode } from \"./BinNode\";\r\nimport p5Types from \"p5\";\r\n\r\nexport default class BST {\r\n  root: BinNode;\r\n  valuesInOrder: number[] | string[] = [];\r\n  rootX: number;\r\n  rootY: number;\r\n\r\n  constructor(node: BinNode) {\r\n    this.root = node;\r\n    this.rootX = node.xCo;\r\n    this.rootY = node.yCo;\r\n  }\r\n\r\n  draw(p5: p5Types, node: BinNode | undefined) {\r\n    if (!node) {\r\n      return;\r\n    }\r\n    p5.fill(255);\r\n    p5.noStroke();\r\n    let size = 30;\r\n    p5.textAlign(p5.CENTER);\r\n    let x = node.xCo + node.leftSpacing + node.rightSpacing;\r\n    let y = node.yCo + node.leftSpacing + node.rightSpacing;\r\n    p5.text(node.value, x, y);\r\n    p5.stroke(255);\r\n    p5.noFill();\r\n    p5.ellipse(x, y, size, size);\r\n    //@ts-ignore\r\n    p5.line(\r\n      //@ts-ignore\r\n      node.parent?.xCo + node.parent?.leftSpacing + node.parent?.rightSpacing,\r\n      //@ts-ignore\r\n      node.parent?.yCo + node.parent?.rightSpacing + node.parent?.leftSpacing,\r\n      x,\r\n      y\r\n    );\r\n    this.draw(p5, node.left);\r\n    this.draw(p5, node.right);\r\n  }\r\n\r\n  // Wrapper methods\r\n  traverseInOrder() {\r\n    this.root.traverseInOrder(this.root, this.valuesInOrder);\r\n  }\r\n\r\n  addNode(node: BinNode) {\r\n    this.root.addNodeBST(node);\r\n  }\r\n\r\n  printParent(node: BinNode) {\r\n    if (node.parent) console.log(`${node.parent?.value} --> ${node.value}`);\r\n    if (node.left) this.printParent(node.left);\r\n    if (node.right) this.printParent(node.right);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport p5Types from \"p5\";\r\nimport Sketch from \"react-p5\";\r\nimport { BinNode } from \"../models/BinNode\";\r\nimport BST from \"../models/BST\";\r\n\r\ninterface BinarySearchTreeSketchProps {}\r\n\r\nexport const SketchBST: React.FC<BinarySearchTreeSketchProps> = (\r\n  props: BinarySearchTreeSketchProps\r\n) => {\r\n  const root = new BinNode(100);\r\n  root.xCo = window.innerWidth / 2;\r\n  root.yCo = 100;\r\n  let rootBST = new BST(root);\r\n  rootBST.addNode(new BinNode(15));\r\n  rootBST.addNode(new BinNode(11));\r\n  rootBST.addNode(new BinNode(3));\r\n  rootBST.addNode(new BinNode(60));\r\n  rootBST.addNode(new BinNode(30));\r\n  rootBST.addNode(new BinNode(31));\r\n  rootBST.addNode(new BinNode(110));\r\n  rootBST.traverseInOrder();\r\n  console.log(rootBST);\r\n  rootBST.printParent(rootBST.root);\r\n\r\n  //See annotations in JS for more information\r\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n    p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\r\n  };\r\n\r\n  const draw = (p5: p5Types) => {\r\n    p5.background(\"#172121\");\r\n    rootBST.draw(p5, rootBST.root);\r\n    p5.noLoop();\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} />;\r\n};\r\n","import p5Types from 'p5';\r\n\r\nexport default class Stack<T> {\r\n    // We limit the size based on the amount of items we can show\r\n    maxSize: number = Math.floor((window.innerHeight - 50) / 50);\r\n    values: T[];\r\n\r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.values.length === 0;\r\n    }\r\n\r\n    isFull(): boolean {\r\n        return this.values.length === this.maxSize;\r\n    }\r\n\r\n    push(value: T) {\r\n        if (this.values.length >= this.maxSize) {\r\n            console.log(`StackOverflow my guy`);\r\n        } else {\r\n            this.values.push(value);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.values.length === 0) {\r\n            console.log(`Stack underflow my guy`);\r\n        } else {\r\n            return this.values.pop();\r\n        }\r\n    }\r\n\r\n    peek() {\r\n        if (this.values.length === 0) {\r\n            console.log(`Stack underflow my guy`);\r\n        } else {\r\n            return this.values[this.values.length - 1];\r\n        }\r\n    }\r\n\r\n    drawStack(p5: p5Types) {\r\n        let xCord = p5.width / 2;\r\n        let yCord = p5.height - 50;\r\n        let stackWidth = 100;\r\n        let stackHeight = p5.height - 50;\r\n        this.drawShape(xCord, yCord, stackWidth, stackHeight, p5);\r\n        this.drawStackItems(xCord, yCord, p5);\r\n\r\n        this.drawStart(xCord, yCord, stackWidth, stackHeight, p5);\r\n    }\r\n\r\n    drawShape(\r\n        xCord: number,\r\n        yCord: number,\r\n        stackWidth: number,\r\n        stackHeight: number,\r\n        p5: p5Types\r\n    ) {\r\n        p5.rectMode(p5.CENTER);\r\n        p5.stroke(255);\r\n        p5.noFill();\r\n        p5.rect(xCord, p5.height / 2, stackWidth, stackHeight);\r\n        p5.stroke('#172121');\r\n        p5.line(\r\n            xCord - stackWidth / 2,\r\n            (p5.height - stackHeight) / 2,\r\n            xCord + stackWidth / 2,\r\n            (p5.height - stackHeight) / 2\r\n        );\r\n    }\r\n\r\n    drawStackItems(xCord: number, yCord: number, p5: p5Types) {\r\n        this.values.forEach((value) => {\r\n            p5.fill(255);\r\n            p5.noStroke();\r\n            p5.textAlign(p5.CENTER);\r\n            p5.text(`Value➡️${value || 'null'}`, xCord, yCord);\r\n            p5.rectMode(p5.CENTER);\r\n            p5.stroke(255);\r\n            p5.noFill();\r\n            p5.rect(xCord, yCord, 75, 50);\r\n            yCord -= 50;\r\n        });\r\n    }\r\n\r\n    drawStart(\r\n        xCord: number,\r\n        yCord: number,\r\n        stackWidth: number,\r\n        stackHeight: number,\r\n        p5: p5Types\r\n    ) {\r\n        p5.fill(255);\r\n        p5.noStroke();\r\n        p5.textAlign(p5.CENTER);\r\n        p5.text(`Start ⬇️`, xCord, (p5.height - stackHeight) / 2);\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport p5Types from 'p5';\r\nimport Sketch from 'react-p5';\r\nimport Stack from '../models/Stack';\r\nimport { genRandomNumber } from '../util/genRandomNumber';\r\n\r\ninterface StackSketchProps {}\r\n\r\nconst fillNumberStack = (minLimit: number, maxLimit: number) => {\r\n    const stack = new Stack<number>();\r\n    for (let i = 0; i < stack.maxSize; i++) {\r\n        stack.push(genRandomNumber(minLimit, maxLimit));\r\n    }\r\n    return stack;\r\n};\r\n\r\nexport const StackSketch: React.FC<StackSketchProps> = (\r\n    props: StackSketchProps\r\n) => {\r\n    const [myStack, setMyStack] = useState(fillNumberStack(0, 100));\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(\r\n            canvasParentRef\r\n        );\r\n    };\r\n\r\n    const draw = (p5: p5Types) => {\r\n        p5.background('#172121');\r\n        myStack.drawStack(p5);\r\n        p5.noLoop();\r\n    };\r\n\r\n    const resize = (p5: p5Types) => {\r\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\r\n        setMyStack(fillNumberStack(0, 100));\r\n    };\r\n\r\n    return <Sketch setup={setup} draw={draw} windowResized={resize} />;\r\n};\r\n","import p5Types from 'p5';\r\n\r\nexport default class CircularQueue<T> {\r\n    maxSize: number = Math.floor((window.innerWidth - 75) / 80);\r\n    frontIndex: number;\r\n    rearIndex: number;\r\n    values: T[];\r\n\r\n    constructor() {\r\n        this.values = [];\r\n        this.frontIndex = -1;\r\n        this.rearIndex = -1;\r\n    }\r\n\r\n    isFull(): boolean {\r\n        if (this.frontIndex === 0 && this.rearIndex === this.maxSize - 1) {\r\n            return true;\r\n        }\r\n        if (this.frontIndex === this.rearIndex + 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        if (this.frontIndex === -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    resetQueue() {\r\n        this.frontIndex = -1;\r\n        this.rearIndex = -1;\r\n    }\r\n\r\n    enQueue(value: T) {\r\n        if (this.isFull()) {\r\n            console.log('Queue is full, no more room.');\r\n        } else {\r\n            // If this is the first item\r\n            if (this.frontIndex === -1) {\r\n                this.frontIndex = 0;\r\n            }\r\n            // Determine rear position dynamically, in a circular manner\r\n            this.rearIndex = (this.rearIndex + 1) % this.maxSize;\r\n            this.values[this.rearIndex] = value;\r\n        }\r\n    }\r\n\r\n    deQueue() {\r\n        let valueToBeDequeue: T;\r\n        if (this.isEmpty()) {\r\n            console.log('Nothing to return, Queue is empty');\r\n            return undefined;\r\n        } else {\r\n            valueToBeDequeue = this.values[this.frontIndex];\r\n\r\n            if (this.frontIndex === this.rearIndex) {\r\n                // This is the last element, so we reset\r\n                this.resetQueue();\r\n            } else {\r\n                this.frontIndex = (this.frontIndex + 1) % this.maxSize;\r\n            }\r\n            return valueToBeDequeue;\r\n        }\r\n    }\r\n\r\n    printQueue() {\r\n        let index = this.frontIndex;\r\n        if (this.isEmpty()) {\r\n            console.log('Queue has no items');\r\n            return;\r\n        }\r\n        console.log(`Front ➡️ ${index}`);\r\n        console.log(`Items ➡️ `);\r\n        for (; index !== this.rearIndex; index = (index + 1) % this.maxSize) {\r\n            console.log(`${this.values[index]} ➡️ `);\r\n        }\r\n        // Last item\r\n        console.log(`${this.values[index]}`);\r\n        console.log(`Rear ➡️ ${this.rearIndex}`);\r\n    }\r\n\r\n    drawQueue(p5: p5Types) {\r\n        let xCord = 50;\r\n        let yCord = p5.height / 2;\r\n        let queueWidth = p5.width - 50;\r\n        let queueHeight = 50;\r\n        this.drawShape(xCord, yCord, 70, p5);\r\n        this.drawQueueItems(xCord, yCord, p5);\r\n        this.drawFront(xCord, queueHeight, p5);\r\n        this.drawRear(queueHeight, queueWidth, p5);\r\n    }\r\n\r\n    drawShape(\r\n        xCord: number,\r\n        yCord: number,\r\n        queueItemHeight: number,\r\n        p5: p5Types\r\n    ) {\r\n        p5.stroke(255);\r\n        p5.line(xCord, yCord, p5.width - 50, yCord);\r\n        p5.line(xCord, yCord + queueItemHeight, p5.width - 50, yCord + 70);\r\n    }\r\n\r\n    drawQueueItems(xCord: number, yCord: number, p5: p5Types) {\r\n        xCord = xCord + xCord / 2;\r\n        yCord = yCord + 35;\r\n        this.values.forEach((value) => {\r\n            p5.fill(255);\r\n            p5.noStroke();\r\n            p5.textAlign(p5.CENTER);\r\n            p5.text(`Value➡️${value || 'null'}`, xCord, yCord);\r\n            p5.rectMode(p5.CENTER);\r\n            p5.stroke(255);\r\n            p5.noFill();\r\n            p5.rect(xCord, yCord, 75, 50);\r\n            xCord += 80;\r\n        });\r\n    }\r\n\r\n    drawFront(xCord: number, queueHeight: number, p5: p5Types) {\r\n        p5.fill(255);\r\n        p5.noStroke();\r\n        p5.textAlign(p5.CENTER);\r\n        p5.text(`Front ⬇️`, xCord, (p5.height - queueHeight) / 2);\r\n    }\r\n\r\n    drawRear(queueHeight: number, queueWidth: number, p5: p5Types) {\r\n        p5.fill(255);\r\n        p5.noStroke();\r\n        p5.textAlign(p5.CENTER);\r\n        p5.text(`Rear ⬇️`, queueWidth, (p5.height - queueHeight) / 2);\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport p5Types from 'p5';\r\nimport Sketch from 'react-p5';\r\nimport CircularQueue from '../models/CircularQueue';\r\nimport { genRandomNumber } from '../util/genRandomNumber';\r\n\r\ninterface CircularQueueSketchProps {}\r\n\r\nconst fillNumberQueue = (minLimit: number, maxLimit: number) => {\r\n    const queue = new CircularQueue<number>();\r\n    for (let i = 0; i < queue.maxSize; i++) {\r\n        queue.enQueue(genRandomNumber(minLimit, maxLimit));\r\n    }\r\n    return queue;\r\n};\r\n\r\nexport const CircularQueueSketch: React.FC<CircularQueueSketchProps> = (\r\n    props: CircularQueueSketchProps\r\n) => {\r\n    const [myQueue, setMyQueue] = useState(fillNumberQueue(0, 100));\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(\r\n            canvasParentRef\r\n        );\r\n        console.log(myQueue);\r\n    };\r\n\r\n    const draw = (p5: p5Types) => {\r\n        p5.background('#172121');\r\n        myQueue.drawQueue(p5);\r\n        p5.noLoop();\r\n    };\r\n\r\n    const resize = (p5: p5Types) => {\r\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\r\n        setMyQueue(fillNumberQueue(0, 100));\r\n    };\r\n\r\n    return <Sketch setup={setup} draw={draw} windowResized={resize} />;\r\n};\r\n","import React from 'react';\r\nimport p5Types from 'p5';\r\nimport Sketch from 'react-p5';\r\nimport { createFillDoublyLinkedListNumbers } from '../util/fillLinkedList';\r\n\r\ninterface DoublyLinkedListSketchProps {}\r\n\r\nexport const DoublyLinkedListSketch: React.FC<DoublyLinkedListSketchProps> = (\r\n    props: DoublyLinkedListSketchProps\r\n) => {\r\n    const linkedListOfNumbers = createFillDoublyLinkedListNumbers(18, 42, 720);\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(\r\n            canvasParentRef\r\n        );\r\n        linkedListOfNumbers.outputList();\r\n    };\r\n\r\n    const draw = (p5: p5Types) => {\r\n        p5.background('#172121');\r\n        p5.noLoop();\r\n    };\r\n\r\n    const resize = (p5: p5Types) => {\r\n        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\r\n    };\r\n\r\n    return <Sketch setup={setup} draw={draw} windowResized={resize} />;\r\n};\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { LinkedListSketch } from './sketches/LinkedListSketch';\r\nimport { SketchBST } from './sketches/BinarySearchTreeSketch';\r\nimport { StackSketch } from './sketches/StackSketch';\r\nimport { CircularQueueSketch } from './sketches/CircularQueueSketch';\r\nimport { DoublyLinkedListSketch } from './sketches/DoublyLinkedListSketch';\r\n\r\nconst App = () => {\r\n    const [currentSketch, setCurrentSketch] = useState(3);\r\n    const handleSwitch = (n: number) => {\r\n        switch (n) {\r\n            case 0:\r\n                return <SketchBST />;\r\n            case 1:\r\n                return <LinkedListSketch />;\r\n            case 2:\r\n                return <StackSketch />;\r\n            case 3:\r\n                return <CircularQueueSketch />;\r\n            case 4:\r\n                return <DoublyLinkedListSketch />;\r\n        }\r\n    };\r\n\r\n    const updateCurrentSketch = (value: number) => {\r\n        setCurrentSketch(value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-center\">\r\n                <button\r\n                    className=\"mr-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\r\n                    onClick={() => updateCurrentSketch(0)}\r\n                >\r\n                    Binary Search Tree\r\n                </button>\r\n                <button\r\n                    className=\"mr-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\r\n                    onClick={() => updateCurrentSketch(1)}\r\n                >\r\n                    Linked List\r\n                </button>\r\n                <button\r\n                    className=\"mr-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\r\n                    onClick={() => updateCurrentSketch(2)}\r\n                >\r\n                    Stack\r\n                </button>\r\n                <button\r\n                    className=\"mr-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\r\n                    onClick={() => updateCurrentSketch(3)}\r\n                >\r\n                    Circular Queue\r\n                </button>\r\n                <button\r\n                    className=\"mr-8 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\r\n                    onClick={() => updateCurrentSketch(4)}\r\n                >\r\n                    Doubly Linked List\r\n                </button>\r\n            </div>\r\n            {handleSwitch(currentSketch)}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}